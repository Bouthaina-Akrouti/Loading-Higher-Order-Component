{"version":3,"sources":["MovieCard.js","LoadingSpinner.js","HOC.js","MovieList.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","className","Card","style","width","Img","variant","src","info","image","height","Body","Title","title","LoadingSpinner","Spinner","animation","role","HOC","WrappedComponent","this","isLoading","Component","Container","list","map","el","index","key","App","state","id","rating","setTimeout","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAiBeA,EAfG,SAACC,GAEf,OACI,yBAAKC,UAAU,cACX,kBAACC,EAAA,EAAD,CAAMD,UAAU,OAAOE,MAAO,CAAEC,MAAO,UACnC,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKP,EAAMQ,KAAKC,MAAON,MAAO,CAAEC,MAAO,QAASM,OAAQ,WAChF,kBAACR,EAAA,EAAKS,KAAN,KACI,kBAACT,EAAA,EAAKU,MAAN,KAAaZ,EAAMQ,KAAKK,W,QCG7BC,EATQ,WACnB,OACI,yBAAKb,UAAU,WACX,kBAACc,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC7B,0BAAMhB,UAAU,WAAhB,iBCMDiB,EAVH,SAAAC,GACR,wLAEQ,OACIC,KAAKpB,MAAMqB,UAAY,kBAAC,EAAD,MAAoB,kBAACF,EAAqBC,KAAKpB,WAHlF,EAAM,CAAesB,c,QCcVJ,KAbG,SAAClB,GAEX,OACI,kBAACuB,EAAA,EAAD,CAAWtB,UAAU,yCACjB,yBAAKA,UAAU,cACVD,EAAMwB,KAAKC,KAAI,SAACC,EAAIC,GAAL,OAAe,kBAAC,EAAD,CAAWC,IAAKD,EAAOnB,KAAMkB,YC0DjEG,E,YA/Db,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KACD8B,MAAQ,CACXN,KAAM,CACJ,CACEO,GAAI,aACJtB,MAAO,sKACPI,MAAO,aACPmB,OAAQ,GAEV,CACED,GAAI,gBACJtB,MAAO,6EACPI,MAAO,gBACPmB,OAAQ,GAEV,CACED,GAAI,QACJtB,MAAO,wJACPI,MAAO,QACPmB,OAAQ,GAGV,CACED,GAAI,yBACJtB,MAAO,mGACPI,MAAO,yBACPmB,OAAQ,GAGV,CACED,GAAI,gBACJtB,MAAO,6GACPI,MAAO,gBACPmB,OAAQ,GAGV,CACED,GAAI,WACJtB,MAAO,+FACPI,MAAO,WACPmB,OAAQ,IAGZX,WAAW,GA5CI,E,iFAiDE,IAAD,OAClBY,YAAW,kBAAM,EAAKC,SAAS,CAACb,WAAW,MAAS,O,+BAKpD,OACE,yBAAKpB,UAAU,OACf,kBAAC,EAAD,CAAWuB,KAAQJ,KAAKU,MAAMN,KAAMH,UAAaD,KAAKU,MAAMT,iB,GA1DhDC,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1413157b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nconst MovieCard = (props) => {\r\n\r\n    return (\r\n        <div className=\"movie-card\">\r\n            <Card className=\"card\" style={{ width: '215px' }}>\r\n                <Card.Img variant=\"top\" src={props.info.image} style={{ width: '215px', height: '290px' }} />\r\n                <Card.Body>\r\n                    <Card.Title>{props.info.title}</Card.Title>\r\n                   \r\n\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\nexport default MovieCard","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst LoadingSpinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <Spinner animation=\"border\" role=\"status\" >\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n        </div>\r\n    );\r\n}\r\nexport default LoadingSpinner;","import React, {Component} from 'react'\r\nimport LoadingSpinner from './LoadingSpinner'\r\n\r\nconst HOC = WrappedComponent => {\r\n    return class extends Component {\r\n        render(){\r\n            return(\r\n                this.props.isLoading ? <LoadingSpinner/> : <WrappedComponent {...this.props}/>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default HOC","import React from 'react';\r\nimport MovieCard from './MovieCard'\r\nimport HOC from './HOC'\r\nimport { Container } from 'react-bootstrap'\r\n\r\nconst MovieList = (props) => {\r\n  \r\n        return (\r\n            <Container className=\"d-flex flex-row justify-content-start\">\r\n                <div className=\"movie-list\">\r\n                    {props.list.map((el, index) => <MovieCard key={index} info={el} />)}\r\n                </div>\r\n               \r\n\r\n            </Container>\r\n        )\r\n    }\r\n\r\nexport default HOC(MovieList)","import React, { Component } from 'react';\nimport './App.css';\nimport MovieList from './MovieList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\n        {\n          id: 'Maleficent',\n          image: 'https://amc-theatres-res.cloudinary.com/image/upload/f_auto,fl_lossy,h_465,q_auto,w_310/v1565363492/amc-cdn/production/2/movies/53700/53730/PosterDynamic/87999.jpg',\n          title: 'Maleficent',\n          rating: 3\n        },\n        {\n          id: 'Scary Stories',\n          image: \"http://fr.web.img6.acsta.net/c_215_290/pictures/19/07/24/11/24/3992643.jpg\",\n          title: 'Scary Stories',\n          rating: 5\n        },\n        {\n          id: 'Drive',\n          image: \"https://m.media-amazon.com/images/M/MV5BYTZmOTY1MDAtOTYxOC00YTQ1LTlkNDUtMmJiZDEyYmE1YmRmXkEyXkFqcGdeQXVyODE5NzE3OTE@._V1_UY268_CR16,0,182,268_AL_.jpg\",\n          title: 'Drive',\n          rating: 2\n    \n        },\n        {\n          id: 'El Cilencio Del Viento',\n          image: \"https://www.promenadesfilms.com/medias/promenadesfilms/Cartel%20El%20Silencio%20del%20Viento.jpg\",\n          title: 'El Cilencio Del Viento',\n          rating: 1\n    \n        },\n        {\n          id: 'SArtemis Fowl',\n          image: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/f4/Artemis_Fowl_poster.jpg/220px-Artemis_Fowl_poster.jpg\",\n          title: 'SArtemis Fowl',\n          rating: 4\n    \n        },\n        {\n          id: 'Valerian',\n          image: \"https://media.services.cinergy.ch/media/box1600/2adad8d68850dd65b02425ea64c3c758955f22f6.jpg\",\n          title: 'Valerian',\n          rating: 3\n        }\n      ],\n      isLoading: true\n\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({isLoading: false}), 3000)\n  }\n  \n  render(){\n\n    return (\n      <div className=\"App\">\n      <MovieList list = {this.state.list} isLoading = {this.state.isLoading}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}